(function(){
  function Color(hex){
    this.value = hex || 0;
    this.set = hex=>{this.value = hex;};
    this.setHex = this.set;
  }

  function Scene(){
    this.children = [];
    this.background = new Color(0x000000);
  }
  Scene.prototype.add = function(o){
    this.children.push(o);
  };

  function PerspectiveCamera(){
    this.position = {x:0,y:0,z:0,set:function(x,y,z){this.x=x;this.y=y;this.z=z;}};
    this.aspect = 1;
  }
  PerspectiveCamera.prototype.updateProjectionMatrix = function(){};
  PerspectiveCamera.prototype.lookAt = function(){};

  function MeshLambertMaterial(opts){
    this.color = new Color((opts&&opts.color)||0xffffff);
  }

  function MeshStandardMaterial(opts){
    this.color = new Color((opts&&opts.color)||0xffffff);
  }

  function PlaneGeometry(w,h){
    this.width = w; this.height = h;
  }

  function BoxGeometry(w,h,d){
    this.width = w; this.height = h; this.depth = d;
  }

  function SphereGeometry(r){
    this.radius = r;
  }

  function Mesh(geom,mat){
    this.geometry = geom;
    this.material = mat||{};
    this.position = {x:0,y:0,z:0,set:function(x,y,z){this.x=x;this.y=y;this.z=z;}};
    this.rotation = {x:0,y:0,z:0};
    this.userData = {};
  }

  function Vector2(){ this.x=0; this.y=0; }

  var currentRenderer = null;

  function project(pos,camera,w,h){
    var dx = pos.x - camera.position.x;
    var dy = pos.y - camera.position.y;
    var dz = pos.z - camera.position.z;
    var isoX = (dx - dz) * 0.5;
    var isoY = (dx + dz) * 0.25 - dy;
    return {x: isoX + w/2, y: isoY + h/2};
  }

  function WebGLRenderer(){
    this.domElement = document.createElement('canvas');
    this.ctx = this.domElement.getContext('2d');
    currentRenderer = this;
  }
  WebGLRenderer.prototype.setSize = function(w,h){
    this.domElement.width = w; this.domElement.height = h;
  };
  WebGLRenderer.prototype.render = function(scene,camera){
    var ctx = this.ctx;
    var w = this.domElement.width; var h = this.domElement.height;
    ctx.fillStyle = '#'+scene.background.value.toString(16).padStart(6,'0');
    ctx.fillRect(0,0,w,h);
    var objs = scene.children.slice().sort(function(a,b){return b.position.z-a.position.z;});
    objs.forEach(function(o){ drawObj(ctx,o,camera,w,h); });
  };

  function drawObj(ctx,o,camera,w,h){
    var p = project(o.position,camera,w,h);
    ctx.fillStyle = '#'+o.material.color.value.toString(16).padStart(6,'0');
    if(o.geometry instanceof BoxGeometry){
      var size = (o.geometry.width+o.geometry.depth)/2;
      ctx.fillRect(p.x-size/2,p.y-o.geometry.height,p.x+size/2-(p.x-size/2),o.geometry.height);
    }else if(o.geometry instanceof SphereGeometry){
      ctx.beginPath();
      ctx.arc(p.x,p.y-o.geometry.radius,o.geometry.radius,0,Math.PI*2); ctx.fill();
    }else if(o.geometry instanceof PlaneGeometry){
      ctx.fillRect(0,0,w,h);
    }
  }

  function Raycaster(){
    this.mx=0; this.my=0; this.camera=null;
  }
  Raycaster.prototype.setFromCamera = function(mouse,camera){
    this.mx = mouse.x; this.my = mouse.y; this.camera = camera;
  };
  Raycaster.prototype.intersectObjects = function(objs){
    var w=currentRenderer.domElement.width, h=currentRenderer.domElement.height;
    var sx=(this.mx+1)*w/2, sy=(-this.my+1)*h/2; var hits=[];
    objs.forEach(function(o){
      var p=project(o.position, this.camera,w,h); var r=20;
      if(o.geometry instanceof BoxGeometry){ r=(o.geometry.width+o.geometry.depth)/2; }
      if(o.geometry instanceof SphereGeometry){ r=o.geometry.radius; }
      if(sx>=p.x-r && sx<=p.x+r && sy>=p.y-r && sy<=p.y+r){ hits.push({object:o}); }
    },this);
    return hits;
  };

  function HemisphereLight(){
    this.position = {x:0,y:0,z:0,set:function(x,y,z){this.x=x;this.y=y;this.z=z;}};
    this.color = new Color(0xffffff);
  }

  window.THREE={
    Scene:Scene,Color:Color,PerspectiveCamera:PerspectiveCamera,WebGLRenderer:WebGLRenderer,
    HemisphereLight:HemisphereLight,PlaneGeometry:PlaneGeometry,MeshLambertMaterial:MeshLambertMaterial,
    Mesh:Mesh,Vector2:Vector2,Raycaster:Raycaster,BoxGeometry:BoxGeometry,
    MeshStandardMaterial:MeshStandardMaterial,SphereGeometry:SphereGeometry
  };
})();

